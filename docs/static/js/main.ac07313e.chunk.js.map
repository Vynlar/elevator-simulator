{"version":3,"sources":["GraphicalElevator.js","Elevator.js","StandardModeController.js","EmergencyModeController.js","Controller.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","Floor","_templateObject2","Indicators","_templateObject3","FloorIndicator","_templateObject4","DirectionIndicator","_templateObject5","_ref","on","_ref2","down","DirectionIndicators","_templateObject6","Doors","_templateObject7","_ref3","open","_ref4","OutsideButtons","_templateObject8","Button","_templateObject9","_ref5","Cabin","_templateObject10","GraphicalElevator","_ref6","numFloors","state","onFloorCall","react_default","a","createElement","outside","map","floor","index","up","doorsOpen","upButton","onClick","downButton","second","FIRE_KEY","OFF","ON","RESET","Elevator_templateObject","Column","Elevator_templateObject2","padding","wrap","Cell","Elevator_templateObject3","CabinButtons","Elevator_templateObject4","CabinButton","Elevator_templateObject5","Elevator","self","R","cabin","fireKeyPosition","buttons","lightOn","changeKeyPosition","newPosition","_this","setState","props","listeners","onFireKeyChange","commands","Object","assertThisInitialized","goToFloor","f","cb","arguments","length","undefined","setTimeout","onFloorArrival","setCabinDoors","onCabinDoorsOpened","onCabinDoorsClosed","setFloorDoors","newFloor","_f","isDoorsOpen","onFloorDoorsOpened","onFloorDoorsClosed","setOutsideFloorIndicator","_f2","value","setCabinFloorIndicator","setCabinDirectionIndicator","_f3","setOutsideDirectionIndicator","_f4","setOutsideButtonLights","_f5","setCabinRequestButtonLight","_f6","getLatestState","_this2","this","Elevator_Container","src_GraphicalElevator","_this2$props$listener","_len2","args","Array","_key2","apply","concat","onFireAlarm","onDoorOpenRequest","onDoorCloseRequest","htmlFor","name","type","checked","onChange","onCabinRequest","key","Component","StandardModeController","queue","undirected","isGoingUp","moving","areDoorsOpen","isQueueEmpty","componentDidMount","registerListeners","addRequest","goToNextFloor","clearRequest","getNextDestination","nextDirection","shouldChangeDirection","sameDirectionFloors","getSameDirectionFloors","direction","validFloors","x","slicedToArray","requests","oppositeDirection","validOppositeRequests","goingUp","closeDoors","openDoorsAttempt","Infinity","_this$state","areRemainingRequests","console","error","log","currentFloor","Error","bind","EmergencyModeController","executedEmergencyRoutine","clearOutsideDirectionIndicators","position","currentElevatorFloor","requestedFloor","EMERGENCY_TIMEOUT","Controller","isEmergency","childListeners","secondsRemainingInEM","put","itCanBeNumbers","orEvenOtherObjects","like","arraysAreCoolToo","goToFirstFloor","counterSeconds","n","cbFinished","Shell","shell","src_EmergencyModeController","Math","src_StandardModeController","objectSpread","App_templateObject","App_templateObject2","App_templateObject3","App_templateObject4","App_templateObject5","App_templateObject6","App_templateObject7","App","Controller_Controller","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac07313e.chunk.js","sourcesContent":["import React from \"react\";\nimport * as R from \"ramda\";\nimport styled from \"@emotion/styled\";\nimport { second } from \"./Elevator.js\";\n\nconst floorHeight = 200;\n\nconst Container = styled.div`\n  background: rgb(200, 200, 200);\n  display: flex;\n  flex-direction: column-reverse;\n`;\n\nconst Floor = styled.div`\n  background: rgb(230, 240, 240);\n  height: ${floorHeight}px;\n  margin-bottom: 40px;\n  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n`;\n\nconst Indicators = styled.div`\n  color: red;\n  background: black;\n  padding: 8px;\n  border-radius: 4px;\n  display: flex;\n  align-self: center;\n  margin-right: 30px;\n`;\n\nconst FloorIndicator = styled.div`\n  text-align: center;\n  width: 40px;\n  font-weight: bold;\n  font-size: 40px;\n`;\n\nconst DirectionIndicator = styled.div`\n  width: 0;\n  height: 0;\n  border-left: 15px solid transparent;\n  border-right: 15px solid transparent;\n  border-bottom: 15px solid ${({ on }) => (on ? \"red\" : \"rgb(100, 0, 0)\")};\n  transform: ${({ down }) => (down ? \"rotate(180deg)\" : \"\")};\n`;\n\nconst DirectionIndicators = styled.div`\n  margin-left: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nconst Doors = styled.div`\n  border: 3px solid rgb(100, 100, 100);\n  border-bottom: none;\n  width: 140px;\n  height: 170px;\n  background: url(https://image.shutterstock.com/image-illustration/inside-elevator-260nw-121950307.jpg);\n  background-position: center;\n  background-size: 180%;\n  overflow: hidden;\n\n  position: relative;\n  border-radius: 5px 5px 0 0;\n\n  &::before {\n    content: \"\";\n    display: block;\n    width: 50%;\n    height: 100%;\n    background: grey;\n    border-right: 1px solid rgb(100, 100, 100);\n\n    transform: translateX(${({ open }) => (open ? \"-100%\" : \"0\")});\n    transition: transform 1s;\n  }\n\n  &::after {\n    content: \"\";\n    display: block;\n    width: 50%;\n    height: 100%;\n    position: absolute;\n    right: 0;\n    top: 0;\n    background: grey;\n    border-left: 1px solid rgb(100, 100, 100);\n    transform: translateX(${({ open }) => (open ? \"100%\" : \"0\")});\n    transition: transform 1s;\n  }\n`;\n\nconst OutsideButtons = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-self: center;\n  margin-left: 30px;\n  background: rgb(150, 150, 150);\n  padding: 10px;\n  border-radius: 5px;\n  border: 2px solid rgb(100, 100, 100);\n`;\n\nconst Button = styled.div`\n  width: 35px;\n  height: 35px;\n  background: rgb(100, 100, 100);\n  border-radius: 50%;\n  cursor: pointer;\n  border: 3px solid ${({ on }) => (on ? \"rgb(200, 0, 0)\" : \"rgb(100, 0, 0)\")};\n  transition: box-shadow 0.15s, transform 0.15s;\n\n  &:first-child {\n    margin-bottom: 10px;\n  }\n\n  &:hover {\n    box-shadow: 0 3px 5px rgba(0,0,0,0.5);\n    transform: translateY(-3px);\n  }\n`;\n\nconst Cabin = styled.div``;\n\nfunction GraphicalElevator({ numFloors, state, onFloorCall }) {\n  return (\n    <Container>\n      {state.outside.map((floor, index) => (\n        <Floor>\n          <Indicators>\n            <FloorIndicator>{floor.floor}</FloorIndicator>\n            <DirectionIndicators>\n              <DirectionIndicator up on={floor.up} />\n              <DirectionIndicator down on={floor.down} />\n            </DirectionIndicators>\n          </Indicators>\n          <Doors open={floor.doorsOpen} />\n          <OutsideButtons>\n            <Button\n              on={floor.upButton}\n              onClick={() => onFloorCall(index, true, false)}\n            />\n            <Button\n              on={floor.downButton}\n              onClick={() => onFloorCall(index, false, true)}\n            />\n          </OutsideButtons>\n        </Floor>\n      ))}\n      <Cabin />\n    </Container>\n  );\n}\n\nexport default GraphicalElevator;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from '@emotion/styled';\nimport * as R from \"ramda\";\nimport GraphicalElevator from \"./GraphicalElevator\";\n\nexport const numFloors = 5;\nexport const second = 1000;\n\nexport const FIRE_KEY = {\n  OFF: \"OFF\",\n  ON: \"ON\",\n  RESET: \"RESET\"\n};\n\nconst listStyle = {\n  \"list-style-type\": \"none\"\n};\n\nconst Container = styled.div`\n    display: flex;\n`;\n\nconst Column = styled.div`\n    flex: 1;\n    padding: 0 ${({ padding }) => padding}px;\n    display: ${({ wrap }) => wrap ? 'flex' : 'block'};\n    flex-wrap: ${({ wrap }) => wrap ? 'wrap' : 'nowrap'};\n`;\n\nconst Cell = styled.div`\n    padding: 16px;\n`;\n\nconst CabinButtons = styled.div`\n    display: flex;\n    margin-top: 16px;\n`;\n\nconst CabinButton = styled.div`\n    padding: 8px;\n    background: rgb(200, 200, 200);\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 30px;\n    margin-right: 10px;\n    border: 3px solid ${({ on }) => on ? 'red' : 'black'};\n    transition: box-shadow 0.15s, transform 0.15s;\n    cursor: pointer;\n\n    &:hover {\n        box-shadow: 0 3px 5px rgba(0,0,0,0.5);\n        transform: translateY(-3px);\n    }\n`;\n\nclass Elevator extends Component {\n  static propTypes = {\n    listeners: PropTypes.objectOf(PropTypes.func)\n  };\n\n  state = {\n    floor: 0,\n    outside: R.pipe(\n      R.range,\n      R.map(floor => ({\n        floor: 0,\n        up: false,\n        down: false,\n        upButton: false,\n        downButton: false,\n        doorsOpen: false\n      }))\n    )(0, numFloors),\n    cabin: {\n      floor: 0,\n      up: false,\n      down: false,\n      doorsOpen: false,\n      fireKeyPosition: FIRE_KEY.OFF,\n      buttons: R.pipe(\n        R.range,\n        R.map(floor => ({\n          lightOn: false\n        }))\n      )(0, numFloors)\n    }\n  };\n\n  changeKeyPosition = newPosition => {\n    this.setState(R.assocPath([\"cabin\", \"fireKeyPosition\"], newPosition));\n    this.props.listeners.onFireKeyChange(this.commands, newPosition);\n  };\n\n  commands = (self => ({\n    /**\n     * goToFloor\n     * @arg {func} f (state) => new floor index [number]\n     * @returns {void}\n     */\n    goToFloor(f, cb = () => {}) {\n      setTimeout(() => {\n        self.setState(\n          state => ({ floor: f(state) }),\n          () => {\n            self.props.listeners.onFloorArrival(self.commands);\n            cb(self.state);\n          }\n        );\n      }, 2.5 * second);\n    },\n    /**\n     * setCabinDoors\n     * @arg {func} f (state) => isDoorsOpen [bool]\n     */\n    setCabinDoors(f, cb = () => {}) {\n      setTimeout(() => {\n        self.setState(\n          state => R.assocPath([\"cabin\", \"doorsOpen\"], f(state), state),\n          () => {\n            if (self.state.cabin.doorsOpen) {\n              self.props.listeners.onCabinDoorsOpened(self.commands);\n            } else {\n              self.props.listeners.onCabinDoorsClosed(self.commands);\n            }\n            cb(self.state);\n          }\n        );\n      }, second * 1);\n    },\n    /**\n     * setFloorDoors\n     * @param {func} f (state) => ({ isDoorsOpen:bool, floor:number })\n     */\n    setFloorDoors(f, cb = () => {}) {\n      setTimeout(() => {\n        let newFloor = 0;\n        self.setState(\n          state => {\n            const { isDoorsOpen, floor } = f(state);\n            newFloor = floor;\n            return R.assocPath([\"outside\", floor, \"doorsOpen\"], isDoorsOpen)(\n              state\n            );\n          },\n          () => {\n            if (self.state.outside[newFloor].doorsOpen)\n              self.props.listeners.onFloorDoorsOpened(self.commands, newFloor);\n            else\n              self.props.listeners.onFloorDoorsClosed(self.commands, newFloor);\n            cb(self.state);\n          }\n        );\n      }, second * 1);\n    },\n    /**\n     * setOutsideFloorIndicator\n     * @param {func} f (state) => ({ floor:number, value:number })\n     */\n    setOutsideFloorIndicator(f, cb = () => {}) {\n      self.setState(\n        state => {\n          const { floor, value } = f(state);\n          return R.assocPath([\"outside\", floor, \"floor\"], value)(state);\n        },\n        () => cb(self.state)\n      );\n    },\n    /**\n     * setCabinFloorIndicator\n     * @param {func} f (state) => value:number\n     */\n    setCabinFloorIndicator(f, cb = () => {}) {\n      self.setState(\n        state => {\n          return R.assocPath([\"cabin\", \"floor\"], f(state))(state);\n        },\n        () => cb(self.state)\n      );\n    },\n    /**\n     * setCabinDirectionIndicator\n     * @param {func} f (state) => ({ up:bool, down:bool })\n     */\n    setCabinDirectionIndicator(f, cb = () => {}) {\n      self.setState(\n        state => {\n          const { up, down } = f(state);\n          return R.pipe(\n            R.assocPath([\"cabin\", \"up\"], up),\n            R.assocPath([\"cabin\", \"down\"], down)\n          )(state);\n        },\n        () => cb(self.state)\n      );\n    },\n    /**\n     * setOutsideDirectionIndicator\n     * @param {func} f (state) => ({ floor:number, up:bool, down:bool })\n     */\n    setOutsideDirectionIndicator(f, cb = () => {}) {\n      self.setState(\n        state => {\n          const { floor, up, down } = f(state);\n          return R.pipe(\n            R.assocPath([\"outside\", floor, \"up\"], up),\n            R.assocPath([\"outside\", floor, \"down\"], down)\n          )(state);\n        },\n        () => cb(self.state)\n      );\n    },\n    /**\n     * setOutsideButtonLights\n     * @param {func} f (state) => ({ floor:number, up:bool, down:bool })\n     */\n    setOutsideButtonLights(f, cb = () => {}) {\n      self.setState(\n        state => {\n          const { floor, up, down } = f(state);\n          return R.pipe(\n            R.assocPath([\"outside\", floor, \"upButton\"], up),\n            R.assocPath([\"outside\", floor, \"downButton\"], down)\n          )(state);\n        },\n        () => cb(self.state)\n      );\n    },\n    /**\n     * setCabinRequestButtonLight\n     * @param {func} f (state) => ({ floor:number, value:number })\n     */\n    setCabinRequestButtonLight(f, cb = () => {}) {\n      self.setState(\n        state => {\n          const { floor, value } = f(state);\n          return R.assocPath([\"cabin\", \"buttons\", floor, \"lightOn\"], value)(\n            state\n          );\n        },\n        () => cb(self.state)\n      );\n    },\n\n    /**\n     * getLatestState\n     * @param {func} f (state) => ({ floor:number, value:number })\n     */\n    getLatestState(cb) {\n      self.setState(() => ({}), () => cb(self.state));\n    }\n  }))(this);\n\n  render() {\n    return (\n      <Container>\n          <Column>\n              <GraphicalElevator\n                numFloors={numFloors}\n                state={this.state}\n                onFloorCall={(...args) =>\n                  this.props.listeners.onFloorCall(this.commands, ...args)\n                }\n              />\n          </Column>\n          <Column padding={32} wrap>\n              <Cell>\n                  <h2>Override Events</h2>\n                  <button\n                    onClick={() =>\n                      this.props.listeners.onFireAlarm(this.commands, this.state.floor)\n                    }\n                  >\n                      Simulate Fire Alarm\n                  </button>\n                  <button\n                    onClick={() =>\n                      this.props.listeners.onDoorOpenRequest(this.commands)\n                    }\n                  >\n                      Open cabin doors (cabin button)\n                  </button>\n                  <button\n                    onClick={() =>\n                      this.props.listeners.onDoorCloseRequest(this.commands)\n                    }\n                  >\n                      Close cabin doors (cabin button)\n                  </button>\n                  <div>\n                      <h2>Fire Key</h2>\n                      <label htmlFor=\"firekey\">\n                          ON\n                          <input\n                            name=\"firekey\"\n                            type=\"radio\"\n                            value={FIRE_KEY.ON}\n                            checked={this.state.cabin.fireKeyPosition == \"ON\"}\n                            onChange={() => this.changeKeyPosition(FIRE_KEY.ON)}\n                          />\n                      </label>\n                      <label htmlFor=\"firekey\">\n                          OFF\n                          <input\n                            name=\"firekey\"\n                            type=\"radio\"\n                            value={FIRE_KEY.OFF}\n                            checked={this.state.cabin.fireKeyPosition == \"OFF\"}\n                            onChange={() => this.changeKeyPosition(FIRE_KEY.OFF)}\n                          />\n                      </label>\n                      <label htmlFor=\"firekey\">\n                          RESET\n                          <input\n                            name=\"firekey\"\n                            type=\"radio\"\n                            value={FIRE_KEY.RESET}\n                            checked={this.state.cabin.fireKeyPosition === \"RESET\"}\n                            onChange={() => this.changeKeyPosition(FIRE_KEY.RESET)}\n                          />\n                      </label>\n                  </div>\n                  <CabinButtons>\n                      {R.reverse(R.range(0, 5)).map(floor => (\n                        <CabinButton onClick={() =>\n                          this.props.listeners.onCabinRequest(this.commands, floor)\n                        }\n                        on={this.state.cabin.buttons[floor].lightOn}\n                        >\n                            {floor}\n                        </CabinButton>\n                      ))}\n                  </CabinButtons>\n              </Cell>\n              <Cell>\n                  <h2>General</h2>\n                  <div>Floor: {this.state.floor}</div>\n\n                  <h2>Cabin</h2>\n                  <div>Floor indicator: {this.state.cabin.floor}</div>\n                  <div>Doors: {this.state.cabin.doorsOpen ? \"OPEN\" : \"CLOSED\"}</div>\n                  <div>Fire key position: {this.state.cabin.fireKeyPosition}</div>\n                  <div>Direction Indicator ^: {this.state.cabin.up ? \"ON\" : \"OFF\"}</div>\n                  <div>\n                      Direction Indicator v: {this.state.cabin.down ? \"ON\" : \"OFF\"}\n                  </div>\n                  <h3>Buttons</h3>\n                  <div>\n                      {this.state.cabin.buttons.map(({ lightOn }, index) => (\n                        <div key={index}>\n                            {index}: {lightOn ? \"ON\" : \"OFF\"}\n                        </div>\n                      ))}\n                  </div>\n              </Cell>\n              <Cell>\n                  <h2>Outside</h2>\n                  <div>\n                      {R.reverse(R.range(0, numFloors)).map(floor => (\n                        <div key={floor}>\n                            <h3>Floor {floor}</h3>\n                            <div>Floor indicator: {this.state.outside[floor].floor}</div>\n                            <div>\n                                Doors open:{\" \"}\n                                {this.state.outside[floor].doorsOpen ? \"OPEN\" : \"CLOSED\"}\n                            </div>\n                            <div>\n                                Button Up: {this.state.outside[floor].upButton ? \"ON\" : \"OFF\"}\n                            </div>\n                            <div>\n                                Button Down:{\" \"}\n                                {this.state.outside[floor].downButton ? \"ON\" : \"OFF\"}\n                            </div>\n                            <div>\n                                Direction Indicator ^:{\" \"}\n                                {this.state.outside[floor].up ? \"ON\" : \"OFF\"}\n                            </div>\n                            <div>\n                                Direction Indicator v:{\" \"}\n                                {this.state.outside[floor].down ? \"ON\" : \"OFF\"}\n                            </div>\n                        </div>\n                      ))}\n                  </div>\n              </Cell>\n          </Column>\n      </Container>\n    );\n  }\n}\n\nexport default Elevator;\n","import React, { Component } from \"react\";\r\nimport * as R from \"ramda\";\r\nimport { numFloors, second } from \"./Elevator\";\r\n\r\nclass StandardModeController extends Component {\r\n  state = {\r\n    queue: R.pipe(\r\n      R.range,\r\n      R.map(() => ({ up: false, down: false, undirected: false }))\r\n    )(0, numFloors),\r\n    isGoingUp: false,\r\n    moving: false,\r\n    areDoorsOpen: false\r\n  };\r\n\r\n  isQueueEmpty = () =>\r\n    R.all(\r\n      R.pipe(\r\n        R.values,\r\n        R.all(R.equals(false))\r\n      )\r\n    )(this.state.queue);\r\n\r\n  componentDidMount = () => {\r\n    this.props.registerListeners(this.listeners);\r\n  };\r\n\r\n  addRequest = (type, floor, commands) => {\r\n    this.setState(R.assocPath([\"queue\", floor, type], true), () =>\r\n      this.goToNextFloor(commands)\r\n    );\r\n  };\r\n\r\n  clearRequest = (type, floor) => {\r\n    this.setState(R.assocPath([\"queue\", floor, type], false));\r\n  };\r\n\r\n  getNextDestination = state => {\r\n    const nextDirection = this.shouldChangeDirection(state.floor)\r\n      ? !this.state.isGoingUp\r\n      : this.state.isGoingUp;\r\n\r\n    this.setState({ isGoingUp: nextDirection });\r\n\r\n    // find the next \"same direction\" request\r\n    const sameDirectionFloors = this.getSameDirectionFloors(\r\n      state.floor,\r\n      nextDirection\r\n    );\r\n    const direction = nextDirection ? \"up\" : \"down\";\r\n    const validFloors = R.pipe(\r\n      // turn array [a, b, c] into [[0, a], [1, b], [2, c]]\r\n      R.addIndex(R.map)((x, index) => [index, x]),\r\n      // Filters based on the requests\r\n      R.filter(\r\n        ([index, requests]) => requests[direction] || requests.undirected\r\n      ),\r\n      R.map(R.head)\r\n    )(sameDirectionFloors);\r\n\r\n    // If there are no more requests in the same direction, get the highest (if currently going up)\r\n    // or lowest (if going down), request in the opposite direction.\r\n    if (validFloors.length === 0) {\r\n      const oppositeDirection = !nextDirection ? \"up\" : \"down\";\r\n      const validOppositeRequests = R.pipe(\r\n        // turn array [a, b, c] into [[0, a], [1, b], [2, c]]\r\n        R.addIndex(R.map)((x, index) => [index, x]),\r\n        // Filters based on the requests\r\n        R.filter(\r\n          ([index, requests]) =>\r\n            requests[oppositeDirection] || requests.undirected\r\n        ),\r\n        R.map(R.head)\r\n      )(sameDirectionFloors);\r\n\r\n      if (validOppositeRequests.length === 0) return state.floor;\r\n\r\n      if (oppositeDirection === \"up\") {\r\n        const result = validOppositeRequests[0];\r\n        return result;\r\n      } else {\r\n        return R.last(validOppositeRequests) + state.floor + 1;\r\n      }\r\n    }\r\n\r\n    if (direction === \"up\") {\r\n      const result = validFloors[0] + state.floor + 1;\r\n      return result;\r\n    } else {\r\n      return R.last(validFloors);\r\n    }\r\n  };\r\n\r\n  goToNextFloor = commands => {\r\n    if (this.state.areDoorsOpen || this.state.moving) return;\r\n    if (this.isQueueEmpty()) {\r\n      // This is the idle state\r\n\r\n      // Clear the cabin direction indicators\r\n      commands.setCabinDirectionIndicator(() => ({ up: false, down: false }));\r\n\r\n      // Clear the outside direction indicators\r\n      R.pipe(\r\n        R.range(0),\r\n        R.forEach(floor => {\r\n          commands.setOutsideDirectionIndicator(state => ({\r\n            floor,\r\n            up: false,\r\n            down: false\r\n          }));\r\n        })\r\n      )(numFloors);\r\n      return;\r\n    }\r\n\r\n    // Update the cabin direction indicator with the current direction\r\n    commands.setCabinDirectionIndicator(state => {\r\n      const nextFloor = this.getNextDestination(state);\r\n      const goingUp = nextFloor > state.floor;\r\n\r\n      // Keep track of which floor we are going to\r\n      this.setState({ isGoingUp: goingUp });\r\n\r\n      return {\r\n        up: goingUp,\r\n        down: !goingUp\r\n      };\r\n    });\r\n\r\n    R.pipe(\r\n      R.range(0),\r\n      R.forEach(floor => {\r\n        commands.setOutsideDirectionIndicator(state => {\r\n          const nextFloor = this.getNextDestination(state);\r\n          const goingUp = nextFloor > state.floor;\r\n\r\n          return {\r\n            floor,\r\n            up: goingUp,\r\n            down: !goingUp\r\n          };\r\n        });\r\n      })\r\n    )(numFloors);\r\n\r\n    this.setState({ moving: true }, () =>\r\n      commands.goToFloor(state => this.getNextDestination(state))\r\n    );\r\n  };\r\n\r\n  closeDoors = commands => {\r\n    commands.setCabinDoors(R.F);\r\n    commands.setFloorDoors(state => ({\r\n      floor: state.floor,\r\n      isDoorsOpen: false\r\n    }));\r\n    this.setState({ areDoorsOpen: false });\r\n  };\r\n\r\n  openDoorsAttempt = commands => {\r\n    if (!this.state.moving) {\r\n      commands.setCabinDoors(R.T);\r\n      commands.setFloorDoors(state => ({\r\n        floor: state.floor,\r\n        isDoorsOpen: true\r\n      }));\r\n      this.setState({ areDoorsOpen: true });\r\n    }\r\n  };\r\n\r\n  getSameDirectionFloors = (floor, isGoingUp) => {\r\n    const { queue } = this.state;\r\n    const remainingFloors = isGoingUp\r\n      ? R.slice(floor + 1, Infinity)(queue)\r\n      : R.slice(0, floor)(queue);\r\n\r\n    return remainingFloors;\r\n  };\r\n\r\n  shouldChangeDirection = floor => {\r\n    const { queue, isGoingUp } = this.state;\r\n    // get the remaining floors\r\n    const sameDirectionFloors = this.getSameDirectionFloors(floor, isGoingUp);\r\n    // check for requests, if there are any, return false, else true\r\n    const areRemainingRequests = R.pipe(\r\n      R.map(R.values), // turn into 2d boolean array\r\n      R.flatten, // turn into 1d boolean array\r\n      R.none(R.equals(true)) // make sure none are true\r\n    )(sameDirectionFloors);\r\n\r\n    if (!areRemainingRequests) {\r\n      return R.pipe(\r\n        R.values,\r\n        R.any(R.equals(true))\r\n      )(queue[floor]);\r\n    }\r\n\r\n    return areRemainingRequests;\r\n  };\r\n\r\n  listeners = (() => ({\r\n    /**\r\n     * onFloorCall\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @param {number} floor Index of the floor\r\n     * @param {bool} up True if the request was up\r\n     * @param {bool} down True if the request was down\r\n     * @returns {void}\r\n     */\r\n    onFloorCall: (commands, floor, up, down) => {\r\n      if (up === down) {\r\n        console.error(\"Received an invalid floor request\");\r\n        return;\r\n      }\r\n\r\n      this.addRequest(up ? \"up\" : \"down\", floor, commands);\r\n\r\n      commands.setOutsideButtonLights(state => ({\r\n        floor,\r\n        up: up || state.outside[floor].upButton,\r\n        down: down || state.outside[floor].downButton\r\n      }));\r\n    },\r\n\r\n    /**\r\n     * onCabinRequest\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @param {number} floor Index of the requested floor\r\n     * @returns {void}\r\n     */\r\n    onCabinRequest: (commands, floor) => {\r\n      this.addRequest(\"undirected\", floor, commands);\r\n\r\n      commands.setCabinRequestButtonLight(() => ({ floor, value: true }));\r\n    },\r\n\r\n    /**\r\n     * onDoorOpenRequest\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @returns {void}\r\n     */\r\n    onDoorOpenRequest: commands => {\r\n      this.openDoorsAttempt(commands);\r\n    },\r\n\r\n    /**\r\n     * onDoorCloseRequest\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @returns {void}\r\n     */\r\n    onDoorCloseRequest: commands => {\r\n      this.closeDoors(commands);\r\n    },\r\n\r\n    /**\r\n     * onFloorArrival\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @returns {void}\r\n     */\r\n    onFloorArrival: commands => {\r\n      // update each floor's floor indicator\r\n      R.pipe(\r\n        R.range(0),\r\n        R.forEach(floor => {\r\n          commands.setOutsideFloorIndicator(state => ({\r\n            floor,\r\n            value: state.floor\r\n          }));\r\n        })\r\n      )(numFloors);\r\n\r\n      // update cabin floor indicator\r\n      commands.setCabinFloorIndicator(state => state.floor);\r\n\r\n      // Open the doors\r\n      this.setState({ moving: false }, () => this.openDoorsAttempt(commands));\r\n\r\n      // remove from queue\r\n      commands.getLatestState(state => {\r\n        const shouldChangeDirection = this.shouldChangeDirection(state.floor);\r\n        console.log(shouldChangeDirection);\r\n\r\n        if (shouldChangeDirection) {\r\n          this.clearRequest(\"up\", state.floor);\r\n          this.clearRequest(\"down\", state.floor);\r\n          commands.setOutsideButtonLights(() => {\r\n            return {\r\n              floor: state.floor,\r\n              up: false,\r\n              down: false\r\n            };\r\n          });\r\n        } else {\r\n          this.clearRequest(this.state.isGoingUp ? \"up\" : \"down\", state.floor);\r\n\r\n          commands.setOutsideButtonLights(() => {\r\n            const currentFloor = state.floor;\r\n            return {\r\n              floor: currentFloor,\r\n              up: this.state.isGoingUp\r\n                ? false\r\n                : state.outside[currentFloor].upButton,\r\n              down: !this.state.isGoingUp\r\n                ? false\r\n                : state.outside[currentFloor].downButton\r\n            };\r\n          });\r\n        }\r\n\r\n        this.clearRequest(\"undirected\", state.floor);\r\n        commands.setCabinRequestButtonLight((state) => ({ floor: state.floor, value: false }));\r\n      });\r\n    },\r\n\r\n    /**\r\n     * onCabinDoorsClosed\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @returns {void}\r\n     */\r\n    onCabinDoorsClosed: commands => {\r\n      this.setState({ areDoorsOpen: false }, () =>\r\n        this.goToNextFloor(commands)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * onCabinDoorsOpened\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @returns {void}\r\n     */\r\n    onCabinDoorsOpened: commands => {\r\n      if (this.state.moving) throw new Error(\"Doors opened while moving\");\r\n\r\n      this.setState({ areDoorsOpen: true }, () =>\r\n        setTimeout(() => this.closeDoors(commands), 3 * second)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * onFloorDoorsOpened\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @param {number} floor The index of the floor whose doors opened\r\n     * @returns {void}\r\n     */\r\n    onFloorDoorsOpened: (commands, floor) => {},\r\n\r\n    /**\r\n     * onFloorDoorsClosed\r\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\r\n     * @param {number} floor The index of the floor whose doors closed\r\n     * @returns {void}\r\n     */\r\n    onFloorDoorsClosed: (commands, floor) => {}\r\n  })).bind(this)();\r\n\r\n  render() {\r\n    return <h1>Standard Mode</h1>;\r\n  }\r\n}\r\n\r\nexport default StandardModeController;\r\n","import React, { Component } from \"react\";\nimport * as R from \"ramda\";\nimport { numFloors } from \"./Elevator\";\n\nclass EmergencyModeController extends Component {\n  state = {\n    executedEmergencyRoutine: false,\n    areDoorsOpen: true, // opposite of SMC, our base state is the doors are open\n    isGoingUp: false\n  };\n\n  componentDidMount = () => {\n    this.props.registerListeners(this.listeners);\n  };\n\n  clearOutsideDirectionIndicators = commands => {\n    // Clear the outside direction indicators\n    R.pipe(\n      R.range(0),\n      R.forEach(floor => {\n        commands.setOutsideDirectionIndicator(state => ({\n          floor,\n          up: false,\n          down: false\n        }));\n      })\n    )(numFloors);\n    return;\n  };\n\n  listeners = (() => ({\n    /**\n     * onFireKeyChange\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @param {string} position one of { 'ON', 'OFF', 'RESET' }\n     */\n    onFireKeyChange: (commands, position) => {\n      if (position === \"OFF\" || position === \"RESET\") {\n        // doesn't matter first floor or not, repeat the steps\n        commands.setCabinDoors(R.F); // close doors\n        commands.setFloorDoors(\n          state => ({ floor: state.floor, isDoorsOpen: false }),\n          () => {\n            // after closing floor doors, update outside lights\n            commands.setCabinFloorIndicator(state => 0);\n            // TODO: Fix this bug, same bug as in normal mode when trying to go down\n            /* commands.setOutsideFloorIndicator(state => ({ floor: 0, value: 0 }));\n             * commands.setOutsideDirectionIndicator(state => ({\n             *   up: false,\n             *   down: true,\n             * })); */\n          }\n        );\n        commands.goToFloor(\n          state => 0,\n          () => {\n            commands.setCabinDoors(R.T); // close doors\n            commands.setFloorDoors(state => ({\n              floor: state.floor,\n              isDoorsOpen: true\n            }));\n          }\n        ); // take in the state and just go to floor 0\n      }\n    },\n    /**\n     * onFloorCall\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @param {number} floor Index of the floor\n     * @param {bool} up True if the request was up\n     * @param {bool} down True if the request was down\n     * @returns {void}\n     */\n    onFloorCall: (commands, floor, up, down) => {\n      // will do nothing, unless we setup fire key on each floor to request the elevator\n    },\n\n    /**\n     * onFireAlarm\n     * Called once when the fire alarm is first triggered\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @returns {void}\n     */\n    onFireAlarm: (commands, currentElevatorFloor) => {},\n\n    /**\n     * onCabinRequest\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @param {number} floor Index of the requested floor\n     * @returns {void}\n     */\n    onCabinRequest: (commands, requestedFloor) => {\n      if (this.state.areDoorsOpen) {\n        console.log(\"Do nothing, the doors are open!\");\n        return;\n      }\n\n      commands.getLatestState(state => {\n        if (state.cabin.fireKeyPosition === \"ON\") {\n          this.clearOutsideDirectionIndicators(commands);\n\n          // Update the cabin direction indicator with the current direction, same as SMC\n          commands.setCabinDirectionIndicator(state => {\n            const goingUp = requestedFloor > state.floor;\n\n            // Keep track of which floor we are going to\n            this.setState({ isGoingUp: goingUp });\n\n            return {\n              up: goingUp,\n              down: !goingUp\n            };\n          });\n\n          R.pipe(\n            R.range(0),\n            R.forEach(floor => {\n              commands.setOutsideDirectionIndicator(state => {\n                const goingUp = requestedFloor > state.floor;\n\n                return {\n                  floor,\n                  up: goingUp,\n                  down: !goingUp\n                };\n              });\n            })\n          )(numFloors);\n\n          commands.setCabinRequestButtonLight(state => ({ floor: requestedFloor, value: true }));\n\n          // simply go to requested floor, don't open any doors\n          console.log(\"Going straight to: \", requestedFloor);\n          commands.goToFloor(state => requestedFloor, () => {});\n        }\n      });\n    },\n\n    /**\n     * onDoorOpenRequest\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @returns {void}\n     */\n    onDoorOpenRequest: commands => {\n      commands.getLatestState(state => {\n        if (state.cabin.fireKeyPosition === \"ON\") {\n          // don't close doors after any time\n          this.setState({ areDoorsOpen: true });\n          commands.setCabinDoors(R.T);\n          commands.setFloorDoors(state => ({\n            floor: state.floor,\n            isDoorsOpen: true\n          }));\n          console.log(\"Open doors\");\n        }\n      });\n    },\n\n    /**\n     * onDoorCloseRequest\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @returns {void}\n     */\n    onDoorCloseRequest: commands => {\n      commands.getLatestState(state => {\n        if (state.cabin.fireKeyPosition === \"ON\") {\n          this.setState({ areDoorsOpen: false });\n          commands.setCabinDoors(R.F);\n          commands.setFloorDoors(state => ({\n            floor: state.floor,\n            isDoorsOpen: false\n          }));\n          console.log(\"Close doors\");\n          console.log(this.state.areDoorsOpen);\n        }\n      });\n    },\n\n    /**\n     * onFloorArrival\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @returns {void}\n     */\n    onFloorArrival: commands => {\n      console.log(\"Arrived at floor\");\n      // update each floor's floor indicator\n      R.pipe(\n        R.range(0),\n        R.forEach(floor => {\n          commands.setOutsideFloorIndicator(state => ({\n            floor,\n            value: state.floor\n          }));\n        })\n      )(numFloors);\n\n      // update direction indicators\n      this.clearOutsideDirectionIndicators(commands);\n      commands.setCabinRequestButtonLight(state => ({ floor: state.floor, value: false }));\n\n      // update cabin floor indicator\n      commands.setCabinFloorIndicator(state => state.floor);\n    },\n\n    /**\n     * onCabinDoorsClosed\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @returns {void}\n     */\n    onCabinDoorsClosed: commands => {\n      // just close doors, don't need to handle any requests\n      this.setState({ areDoorsOpen: false });\n    },\n\n    /**\n     * onCabinDoorsOpened\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @returns {void}\n     */\n    onCabinDoorsOpened: commands => {\n      this.setState({ areDoorsOpen: true });\n    },\n\n    /**\n     * onFloorDoorsOpened\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @param {number} floor The index of the floor whose doors opened\n     * @returns {void}\n     */\n    onFloorDoorsOpened: (commands, floor) => {},\n\n    /**\n     * onFloorDoorsClosed\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @param {number} floor The index of the floor whose doors closed\n     * @returns {void}\n     */\n    onFloorDoorsClosed: (commands, floor) => {}\n  })).bind(this)();\n\n  render() {\n    return <h1>Emergency Mode</h1>;\n  }\n}\n\nexport default EmergencyModeController;\n","import React, { Component } from \"react\";\nimport * as R from \"ramda\";\nimport { numFloors, second } from \"./Elevator\";\n\nimport StandardModeController from \"./StandardModeController\";\nimport EmergencyModeController from \"./EmergencyModeController\";\n\nconst EMERGENCY_TIMEOUT = 30 * 60;\n\nexport default class Controller extends Component {\n  /**\n   * Initial state\n   * Use this.setState() to change the state.\n   * Do not use assignment! e.x. this.state.foo = 'bar'; <-- this will break everything\n   */\n  state = {\n    isEmergency: false,\n    childListeners: null,\n    secondsRemainingInEM: 0,\n\n    put: \"whatever state you want here\",\n    itCanBeNumbers: 7,\n    orEvenOtherObjects: {\n      like: \"this!\"\n    },\n    arraysAreCoolToo: [1, 2, 3, 4]\n  };\n\n  registerListeners = (listeners, cb = () => {}) => {\n    this.setState({ childListeners: listeners }, cb);\n  };\n\n  goToFirstFloor = (commands, currentElevatorFloor) => {};\n\n  counterSeconds = (n, cb, cbFinished) => {\n    if (n < 0) {\n      cbFinished();\n      return;\n    } else {\n      setTimeout(() => {\n        this.counterSeconds(n - 1, cb, cbFinished);\n        cb(n);\n      }, 1000);\n    }\n  };\n\n  listeners = (() => ({\n    /**\n     * onFireAlarm\n     * Called once when the fire alarm is first triggered\n     * @param {object} commands The object of command functions to control the elevator (see ./Elevator.js for documentation)\n     * @returns {void}\n     */\n    onFireAlarm: (commands, currentElevatorFloor) => {\n      // Enable emergency\n      this.setState({ isEmergency: true });\n      console.log(\"FIRE! FIRE!\");\n      console.log(\"In emergency \", this.state.isEmergency);\n\n      this.counterSeconds(\n        EMERGENCY_TIMEOUT,\n        n => {\n          this.setState({ secondsRemainingInEM: n });\n        },\n        () => this.setState({ isEmergency: false })\n      );\n\n      // execute initial routine service\n      // if on first floor, just open doors\n      if (currentElevatorFloor === 0) {\n        commands.setCabinDoors(R.T);\n        commands.setFloorDoors(state => ({\n          floor: state.floor,\n          isDoorsOpen: true\n        }));\n        console.log(\"Already on first floor\");\n      } else {\n        commands.setCabinDoors(R.F); // close doors\n        commands.setFloorDoors(\n          state => ({ floor: state.floor, isDoorsOpen: false }),\n          () => {\n            // after closing floor doors, update outside lights\n            commands.setCabinFloorIndicator(state => 0);\n            // TODO: Fix this bug, same bug as in normal mode when trying to go down\n            /* commands.setOutsideFloorIndicator(state => ({ floor: 0, value: 0 }));\n             * commands.setOutsideDirectionIndicator(state => ({\n             *   up: false,\n             *   down: true,\n             * })); */\n          }\n        );\n        commands.goToFloor(\n          state => 0,\n          () => {\n            commands.setCabinDoors(R.T); // close doors\n            commands.setFloorDoors(state => ({\n              floor: state.floor,\n              isDoorsOpen: true\n            }));\n          }\n        ); // take in the state and just go to floor 0\n        console.log(\"Not first floor\");\n      }\n    },\n    onFireKeyChange: (commands, position) => {\n      // TODO: change to emergency mode if ON\n      if (this.state.isEmergency) {\n        this.state.childListeners.onFireKeyChange(commands, position);\n      }\n    }\n  })).bind(this)();\n\n  // Feel free to add more functions as they are needed. Here's an example:\n  /*\n  myUtilityFunction(numbers, importantData) {\n    return numbers + importantData;\n  }\n  */\n  // Call it by using: `this.myUtilityFunction(5, 2);`\n\n  render() {\n    const Shell = this.props.shell;\n    return (\n      <div>\n        {this.state.isEmergency ? (\n          <div>\n            <EmergencyModeController\n              registerListeners={this.registerListeners}\n            />\n            <h3>\n              {Math.floor(this.state.secondsRemainingInEM / 60)}:\n              {this.state.secondsRemainingInEM % 60}\n            </h3>\n          </div>\n        ) : (\n          <StandardModeController registerListeners={this.registerListeners} />\n        )}\n        <Shell\n          listeners={{ ...this.state.childListeners, ...this.listeners }}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport 'normalize.css';\nimport * as R from 'ramda';\n\nimport Elevator from './Elevator';\nimport Controller from './Controller';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n  padding-top: 80px;\n  padding-bottom: 25px;\n  background: rgb(51, 224, 221);\n  position: relative;\n\n  &::after {\n    content: \"\";\n    width: 100%;\n    height: 75px;\n    position: absolute;\n    bottom: 0;\n    background: rgb(28, 201, 88);\n  }\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  padding: 8px 10px;\n  background: white;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.3);\n  transition: transform 0.2s, box-shadow 0.2s;\n  border-radius: 3px;\n  margin-bottom: 8px;\n  text-align: center;\n  color: black;\n  user-select: none;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 6px rgba(0,0,0,0.3);\n  }\n`;\n\nconst ControlPanel = styled.div`\n  position: fixed;\n  top: 20px;\n  left: 20px;\n  padding: 20px;\n  background: #eeeeee;\n  box-shadow: 0 3px 6px rgba(0,0,0,0.3);\n  border: 6px solid #333333;\n  border-radius: 8px;\n`;\n\nconst Building = styled.div`\n  background: #555555;\n  width: 500px;\n  color: white;\n  padding: 20px;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  z-index: 5;\n  position: relative;\n\n  &::before {\n    content: 'ACME Corp.';\n    position: absolute;\n    z-index: 20;\n    font-weight: bold;\n    font-size: 60px;\n    top: -58px;\n    color: #333;\n  }\n`;\n\nconst Floor = styled.div`\n  background: #777777;\n  height: 200px;\n  margin-bottom: 10px;\n  position: relative;\n  z-index: 0;\n`;\n\nconst FloorButtons = styled.div`\n  position: absolute;\n  top: 60px;\n  left: 120px;\n`;\n\nconst Cabin = styled.div`\n  height: 180px;\n  width: 120px;\n  background: #eeeeee;\n  border-radius: 10px;\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%) translateY(${({ floor }) => 10 + (4-floor) * (200+10)}px);\n  transition: transform 0.5s;\n  z-index: 20;\n`;\n\nconst makeFloor = floor => ({\n  up: false,\n  down: false,\n  dropoff: false,\n  floor,\n});\n\nclass App extends Component {\n  render() {\n    return <Controller shell={Elevator} />\n    /*\n    return (\n      <Container>\n        <Building>\n          <Cabin floor={this.state.floor}></Cabin>\n          {[4,3,2,1,0].map(floor => (\n            <Floor key={floor}>\n              {floor}\n              <FloorButtons>\n                <Button onClick={() => this.requestUp(floor)}>Up</Button>\n                <Button onClick={() => this.requestDown(floor)}>Down</Button>\n              </FloorButtons>\n            </Floor>\n          ))}\n        </Building>\n        <ControlPanel>\n          <div>\n            <Button onClick={this.goUp}>Up</Button>\n            <Button onClick={this.goDown}>Down</Button>\n            {[4,3,2,1,0].map(floor => (\n              <Button key={floor} onClick={() => this.requestDropoff(floor)}>{floor}</Button>\n            ))}\n            <Button onClick={this.goToNextFloor}>TEST</Button>\n          </div>\n          {\n            R.pipe(\n              R.addIndex(R.map)(({ up, down, dropoff }, index) => {\n                return (\n                  <div key={index}>\n                    {index}\n                    {up ? \"Up\" : '--'} |\n                    {down ? \"Down\" : '--'} |\n                    {dropoff ? \"Dropoff\" : '--'}\n                  </div>\n                )\n              }),\n              R.values,\n              R.reverse,\n            )(this.state.requests)}\n        </ControlPanel>\n      </Container>\n    );\n    */\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}